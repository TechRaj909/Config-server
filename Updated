Hereâ€™s how to build a complete Java application using Spring MVC for user registration and login, with a dashboard to view and manage claims. The dashboard will allow users to approve or decline claims, and we'll use basic CSS to style the pages.

### Steps to Build:
1. **Project Setup with Maven**: Set up Spring MVC dependencies.
2. **Database Configuration**: Use MySQL for storing users and claims.
3. **Model Classes**: Define `User` and `Claim`.
4. **Repository Layer**: Interact with the database using JPA.
5. **Service Layer**: Handle business logic.
6. **Controller Layer**: Manage web requests.
7. **Thymeleaf Views**: Create HTML templates for registration, login, and dashboard.
8. **CSS Styling**: Apply basic styles for a user-friendly interface.
9. **Spring Security Configuration**: Manage security (authentication and authorization).

---

### 1. **Project Setup (Maven)**
Make sure your `pom.xml` includes the following dependencies:

```xml
<dependencies>
    <!-- Spring Web -->
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-web</artifactId>
    </dependency>

    <!-- Thymeleaf Template Engine -->
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-thymeleaf</artifactId>
    </dependency>

    <!-- Spring Security -->
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-security</artifactId>
    </dependency>

    <!-- Spring Data JPA -->
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-data-jpa</artifactId>
    </dependency>

    <!-- MySQL Driver -->
    <dependency>
        <groupId>mysql</groupId>
        <artifactId>mysql-connector-java</artifactId>
    </dependency>

    <!-- Lombok (optional) -->
    <dependency>
        <groupId>org.projectlombok</groupId>
        <artifactId>lombok</artifactId>
        <scope>provided</scope>
    </dependency>
</dependencies>
```

### 2. **Database Configuration**
In `application.properties`, configure MySQL:

```properties
spring.datasource.url=jdbc:mysql://localhost:3306/claims_db
spring.datasource.username=root
spring.datasource.password=root

spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
```

### 3. **Model Classes**

#### `User.java`

```java
@Entity
public class User {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(nullable = false, unique = true)
    private String username;

    @Column(nullable = false)
    private String password;

    @Column(nullable = false)
    private String role;

    // Getters and setters
}
```

#### `Claim.java`

```java
@Entity
public class Claim {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String description;
    private String status;  // Pending, Approved, Declined

    @ManyToOne
    @JoinColumn(name = "user_id", nullable = false)
    private User user;

    // Getters and setters
}
```

### 4. **Repository Layer**

#### `UserRepository.java`

```java
import org.springframework.data.jpa.repository.JpaRepository;

public interface UserRepository extends JpaRepository<User, Long> {
    User findByUsername(String username);
}
```

#### `ClaimRepository.java`

```java
import org.springframework.data.jpa.repository.JpaRepository;

import java.util.List;

public interface ClaimRepository extends JpaRepository<Claim, Long> {
    List<Claim> findByUserId(Long userId);
}
```

### 5. **Service Layer**

#### `UserService.java`

```java
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

@Service
public class UserService {

    @Autowired
    private UserRepository userRepository;

    @Autowired
    private PasswordEncoder passwordEncoder;

    public void saveUser(User user) {
        user.setPassword(passwordEncoder.encode(user.getPassword()));
        user.setRole("ROLE_USER");
        userRepository.save(user);
    }

    public User findByUsername(String username) {
        return userRepository.findByUsername(username);
    }
}
```

#### `ClaimService.java`

```java
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class ClaimService {

    @Autowired
    private ClaimRepository claimRepository;

    public List<Claim> getClaimsByUser(Long userId) {
        return claimRepository.findByUserId(userId);
    }

    public void updateClaimStatus(Long claimId, String status) {
        Claim claim = claimRepository.findById(claimId).orElseThrow();
        claim.setStatus(status);
        claimRepository.save(claim);
    }
}
```

### 6. **Controller Layer**

#### `UserController.java`

```java
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;

@Controller
public class UserController {

    @Autowired
    private UserService userService;

    @GetMapping("/register")
    public String showRegistrationForm(Model model) {
        model.addAttribute("user", new User());
        return "register";
    }

    @PostMapping("/register")
    public String registerUser(@ModelAttribute User user, Model model) {
        if (userService.findByUsername(user.getUsername()) != null) {
            model.addAttribute("error", "Username already exists!");
            return "register";
        }
        userService.saveUser(user);
        return "redirect:/login";
    }
}
```

#### `ClaimController.java`

```java
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.Authentication;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;

@Controller
public class ClaimController {

    @Autowired
    private ClaimService claimService;

    @GetMapping("/dashboard")
    public String viewDashboard(Authentication authentication, Model model) {
        User user = (User) authentication.getPrincipal();
        model.addAttribute("claims", claimService.getClaimsByUser(user.getId()));
        return "dashboard";
    }

    @PostMapping("/claims/{id}/approve")
    public String approveClaim(@PathVariable Long id) {
        claimService.updateClaimStatus(id, "Approved");
        return "redirect:/dashboard";
    }

    @PostMapping("/claims/{id}/decline")
    public String declineClaim(@PathVariable Long id) {
        claimService.updateClaimStatus(id, "Declined");
        return "redirect:/dashboard";
    }
}
```

### 7. **Thymeleaf Views**

#### `register.html`

```html
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<head>
    <link rel="stylesheet" th:href="@{/css/styles.css}">
    <title>Register</title>
</head>
<body>
    <h2>Register</h2>
    <form th:action="@{/register}" method="post">
        <div>
            <label for="username">Username:</label>
            <input type="text" id="username" name="username" />
        </div>
        <div>
            <label for="password">Password:</label>
            <input type="password" id="password" name="password" />
        </div>
        <button type="submit">Register</button>
    </form>
</body>
</html>
```

#### `dashboard.html`

```html
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<head>
    <link rel="stylesheet" th:href="@{/css/styles.css}">
    <title>Dashboard</title>
</head>
<body>
    <h2>Claims Dashboard</h2>
    <table>
        <thead>
            <tr>
                <th>ID</th>
                <th>Description</th>
                <th>Status</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
        <tr th:each="claim : ${claims}">
            <td th:text="${claim.id}"></td>
            <td th:text="${claim.description}"></td>
            <td th:text="${claim.status}"></td>
            <td>
                <form th:action="@{/claims/{id}/approve(id=${claim.id})}" method="post">
                    <button type="submit">Approve</button>
                </form>
                <form th:action="@{/claims/{id}/decline(id=${claim.id})}" method="post">
                    <button type="submit">Decline</button>
                </form>
            </td>
        </tr>
        </tbody>
    </table>
</body>
</html>
```

### 8. **CSS Styling**

Create a `styles.css` file under `src/main/resources/static/css/`.

#### `styles.css`

```css
body {
    font-family: Arial, sans-serif;
    background-color: #f4f4f4;
    margin: 0;
    padding: 20px;
}

h2 {
    color: #333;
}

form {
    background-color: #fff;
    padding: 20px;
    border-radius

: 5px;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
}

table {
    width: 100%;
    border-collapse: collapse;
    margin: 20px 0;
}

table, th, td {
    border: 1px solid #ddd;
}

th, td {
    padding: 10px;
    text-align: left;
}

button {
    background-color: #4CAF50;
    color: white;
    padding: 10px;
    border: none;
    cursor: pointer;
}

button:hover {
    background-color: #45a049;
}
```

### 9. **Spring Security Configuration**

#### `SecurityConfig.java`

```java
import org.springframework.context.annotation.Bean;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.stereotype.Component;

@Component
public class SecurityConfig {

    @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
        http
            .authorizeHttpRequests(auth -> auth
                .antMatchers("/register", "/login", "/css/**").permitAll()
                .anyRequest().authenticated())
            .formLogin(form -> form
                .loginPage("/login")
                .defaultSuccessUrl("/dashboard", true)
                .permitAll())
            .logout(logout -> logout
                .logoutSuccessUrl("/login")
                .permitAll());
        return http.build();
    }

    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }
}
```

### 10. **Running the Application**

1. **Set up MySQL database** and create a database named `claims_db`.
2. Run the application using your IDE or terminal:
   ```bash
   mvn spring-boot:run
   ```

3. **Register a new user** by going to `http://localhost:8080/register`.
4. **Log in** at `http://localhost:8080/login`.
5. After login, you will be redirected to the claims dashboard where you can view, approve, or decline claims.

Let me know if you encounter any issues!
