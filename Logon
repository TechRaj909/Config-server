To build a full Spring Boot application with Thymeleaf for user registration and login, where users are redirected to a claims dashboard after login, follow these steps. The dashboard will list all claims and include buttons for approving or declining claims.

### Steps Overview:
1. **Setup Spring Boot Application**
2. **Database Configuration**
3. **Model Classes (User, Claim)**
4. **Repository Layer**
5. **Service Layer**
6. **Controller Layer (Login, Registration, Claims Dashboard)**
7. **Thymeleaf Views**
8. **Spring Security Configuration**
9. **Database Migration (optional)**
10. **Run the Application**

---

### 1. **Setup Spring Boot Application**

#### Create a Maven project with the following dependencies in `pom.xml`:

```xml
<dependencies>
    <!-- Spring Boot -->
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-web</artifactId>
    </dependency>

    <!-- Thymeleaf -->
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-thymeleaf</artifactId>
    </dependency>

    <!-- Spring Security -->
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-security</artifactId>
    </dependency>

    <!-- Spring Data JPA -->
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-data-jpa</artifactId>
    </dependency>

    <!-- MySQL Driver -->
    <dependency>
        <groupId>mysql</groupId>
        <artifactId>mysql-connector-java</artifactId>
    </dependency>

    <!-- Lombok (optional for reducing boilerplate code) -->
    <dependency>
        <groupId>org.projectlombok</groupId>
        <artifactId>lombok</artifactId>
        <scope>provided</scope>
    </dependency>
</dependencies>
```

### 2. **Database Configuration**
Update the `application.properties` (or `application.yml`) to configure your MySQL database connection:

```properties
# MySQL Configuration
spring.datasource.url=jdbc:mysql://localhost:3306/claims_db
spring.datasource.username=root
spring.datasource.password=root

# Hibernate Configuration
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL5Dialect
```

### 3. **Model Classes**

#### `User.java`

```java
@Entity
public class User {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(nullable = false, unique = true)
    private String username;

    @Column(nullable = false)
    private String password;

    @Column(nullable = false)
    private String role;

    // Getters and setters
}
```

#### `Claim.java`

```java
@Entity
public class Claim {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String description;

    private String status;  // Pending, Approved, Declined

    @ManyToOne
    @JoinColumn(name = "user_id", nullable = false)
    private User user;

    // Getters and setters
}
```

### 4. **Repository Layer**

#### `UserRepository.java`
```java
import org.springframework.data.jpa.repository.JpaRepository;

public interface UserRepository extends JpaRepository<User, Long> {
    User findByUsername(String username);
}
```

#### `ClaimRepository.java`
```java
import org.springframework.data.jpa.repository.JpaRepository;

public interface ClaimRepository extends JpaRepository<Claim, Long> {
    List<Claim> findByUserId(Long userId);
}
```

### 5. **Service Layer**

#### `UserService.java`
```java
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

@Service
public class UserService {

    @Autowired
    private UserRepository userRepository;

    @Autowired
    private PasswordEncoder passwordEncoder;

    public void saveUser(User user) {
        user.setPassword(passwordEncoder.encode(user.getPassword()));
        user.setRole("ROLE_USER");
        userRepository.save(user);
    }

    public User findByUsername(String username) {
        return userRepository.findByUsername(username);
    }
}
```

#### `ClaimService.java`
```java
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class ClaimService {

    @Autowired
    private ClaimRepository claimRepository;

    public List<Claim> getClaimsByUser(Long userId) {
        return claimRepository.findByUserId(userId);
    }

    public void updateClaimStatus(Long claimId, String status) {
        Claim claim = claimRepository.findById(claimId).orElseThrow();
        claim.setStatus(status);
        claimRepository.save(claim);
    }
}
```

### 6. **Controller Layer**

#### `UserController.java`
```java
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;

@Controller
public class UserController {

    @Autowired
    private UserService userService;

    @GetMapping("/register")
    public String showRegistrationForm(Model model) {
        model.addAttribute("user", new User());
        return "register";
    }

    @PostMapping("/register")
    public String registerUser(@ModelAttribute User user) {
        userService.saveUser(user);
        return "redirect:/login";
    }
}
```

#### `ClaimController.java`
```java
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.Authentication;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PathVariable;

@Controller
public class ClaimController {

    @Autowired
    private ClaimService claimService;

    @GetMapping("/dashboard")
    public String viewDashboard(Authentication authentication, Model model) {
        User user = (User) authentication.getPrincipal();
        model.addAttribute("claims", claimService.getClaimsByUser(user.getId()));
        return "dashboard";
    }

    @PostMapping("/claims/{id}/approve")
    public String approveClaim(@PathVariable Long id) {
        claimService.updateClaimStatus(id, "Approved");
        return "redirect:/dashboard";
    }

    @PostMapping("/claims/{id}/decline")
    public String declineClaim(@PathVariable Long id) {
        claimService.updateClaimStatus(id, "Declined");
        return "redirect:/dashboard";
    }
}
```

### 7. **Thymeleaf Views**

#### `login.html`
```html
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<head>
    <title>Login</title>
</head>
<body>
    <h2>Login</h2>
    <form th:action="@{/login}" method="post">
        <div>
            <label for="username">Username:</label>
            <input type="text" id="username" name="username" />
        </div>
        <div>
            <label for="password">Password:</label>
            <input type="password" id="password" name="password" />
        </div>
        <button type="submit">Login</button>
    </form>
</body>
</html>
```

#### `register.html`
```html
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<head>
    <title>Register</title>
</head>
<body>
    <h2>Register</h2>
    <form th:action="@{/register}" method="post">
        <div>
            <label for="username">Username:</label>
            <input type="text" id="username" name="username" />
        </div>
        <div>
            <label for="password">Password:</label>
            <input type="password" id="password" name="password" />
        </div>
        <button type="submit">Register</button>
    </form>
</body>
</html>
```

#### `dashboard.html`
```html
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<head>
    <title>Dashboard</title>
</head>
<body>
    <h2>Claims Dashboard</h2>
    <table>
        <thead>
            <tr>
                <th>ID</th>
                <th>Description</th>
                <th>Status</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
        <tr th:each="claim : ${claims}">
            <td th:text="${claim.id}"></td>
            <td th:text="${claim.description}"></td>
            <td th:text="${claim.status}"></td>
            <td>
                <form th:action="@{/claims/{id}/approve(id=${claim.id})}" method="post">
                    <button type="submit">Approve</button>
                </form>
                <form th:action="@{/claims/{id}/decline(id=${claim.id})}" method="post">
                    <button type="submit">Decline</button>
                </form>
            </td>
        </tr>
        </tbody>
    </table>
</body>
</html>
```

### 8. **Spring Security Configuration**

#### `SecurityConfig.java`
```java
import org.springframework.context.annotation.Bean;
import org.springframework.security.config.annotation

.web.builders.HttpSecurity;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.stereotype.Component;

@Component
public class SecurityConfig {

    @Bean
    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
        http
            .authorizeHttpRequests(auth -> auth
                .antMatchers("/register", "/login").permitAll()
                .anyRequest().authenticated())
            .formLogin(form -> form
                .loginPage("/login")
                .defaultSuccessUrl("/dashboard", true)
                .permitAll())
            .logout(logout -> logout
                .logoutSuccessUrl("/login")
                .permitAll());
        return http.build();
    }

    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }
}
```

### 9. **Run the Application**
1. Set up your database (e.g., MySQL) and create a database named `claims_db`.
2. Run the application using your IDE or with the command:
   ```bash
   mvn spring-boot:run
   ```

3. Go to `http://localhost:8080/register` to register a new user.
4. Log in at `http://localhost:8080/login`.
5. After login, the user will be redirected to the claims dashboard, where they can approve or decline claims.

### 10. **Optional Enhancements**
- **Validation**: Add validation for user registration (e.g., password strength, uniqueness).
- **Role-based access**: Add roles like "Admin" to approve or decline all claims.

This application provides a simple login and registration system with role-based redirection to a claims dashboard.
